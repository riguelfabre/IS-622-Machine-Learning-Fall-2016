--Riguel Fabre's example of approximating a function with a neural network

require "torch"
require "nn"
require "lab"


--The function we want to approximate
function z(x,y) return 2*x^2 - 3*y^2 + 1 end



--The function to make our test set
function makeTestSet(a)
  local dataset = {}
  local i = 1
  -- Generate each row of data
 function dataset:size() return 100 end -- 100 examples
 for i=1,dataset:size() do
    local input= lab.randn(2);     --normally distributed example in 2d
    local output= torch.Tensor(1);
    dataset[i] = {input, output}
    i = i + 1
  end
  return dataset
end


--Using the function to make the training set
print("Make training set")
trainset = makeTestSet(lab.range(-10,10, 0.05))


--Building the network
print("Build network")
-- Design your network architecture
model = nn.Sequential()
model:add(nn.Linear(2,10))
model:add(nn.Tanh())
model:add(nn.Linear(10,1))


print("*************************************")
print("With mean absolute value loss function")
print("*************************************")
--Trianing the network with loss function mean absolute value
print("Train network")
-- Choose which cost function you want to use
criterion = nn.AbsCriterion()
-- Choose your learning algorithm and set parameters
trainer = nn.StochasticGradient(model, criterion)
trainer:train(trainset)

print("*************************************")
print("With mean squared error loss function")
print("*************************************")
--Trianing the network with mean sqaured error
print("Train network")
-- Choose which cost function you want to use
criterion2 = nn.MSECriterion()
-- Choose your learning algorithm and set parameters
trainer2 = nn.StochasticGradient(model, criterion2)
trainer2:train(trainset)



x = torch.Tensor(2);   -- create a test example Tensor
x[1] = 1; x[2] = 2; -- set its values
pred = model:forward(x)  -- get the prediction of the mlp
print(pred)          -- print it


for i=1,20 do
        local x = lab.randn(2);
        local out = torch.Tensor(1);
        out[1] = z(x[1],x[2]);
        print("x,y",x[1],x[2])
        print("z(expected value)",out[1])
        print("prediction",model:forward(x))
end